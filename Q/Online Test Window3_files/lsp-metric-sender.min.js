(function(){function a(b,a){this.metricsUrl=b;this.syncIntervalInMs=a||1E4;this.timer;this.metricList=[]}function c(){if(this.metricList&&0<this.metricList.length){console.log("Sending lsp metric with length "+this.metricList.length);try{var b=new XMLHttpRequest;b.open("POST",this.metricsUrl,!0);b.timeout=3E4;b.setRequestHeader("Content-type","application/json");b.send(JSON.stringify(this.metricList))}catch(a){console.error("unable to post lsp metrics to url "+this.metricsUrl+" error: "+a),console.error("unable to send lsp metrics with length "+
this.metricList.length)}this.metricList=[]}}a.prototype.start=function(){this.timer||(this.timer=setInterval(c.bind(this),this.syncIntervalInMs),console.log("lsp metric sender timer started with interval "+this.syncIntervalInMs+" timerId "+this.timer))};a.prototype.stop=function(){this.timer?(clearInterval(this.timer),console.log("lsp metric sender timer with timerId "+this.timer+" cleared."),this.timer=void 0):console.warn("no lsp metric sender timer to clear.");this.send()};a.prototype.send=c;a.prototype.addMetric=
function(a){a&&(this.metricList.push(a),this.start())};this.LspMetricSenderUtil=new function(){return{LspMetricSender:a}}})();