define2(["services/deployJavaService","services/authorizationDataService","services/testWindowFactory","services/diagnosticService","constants/proctoringConstants"],function(){angular.module("mettl").register.service("AuthorizationService",["$log","$q","$window","ProctoringConstants","AuthorizationDataService","TestWindowFactory","DiagnosticService",function(e,k,r,f,d,n,s){function p(b){this.uniqueId=d.getCandidateId();this.candidateEmail=d.getCandidateEmailId();this.candidateIdImage=this.candidateImage=
"";this.authRequestState=f.AuthorizationRequestState.PENDING;this.requestType=f.AuthorizationRequestType.NEW;this.requestResponse=null;this.isRunningWebRTC=b;b=d.getMpsCandidateInfo();this.id=b.id;this.groupId=b.groupId;this.mpsClientId=b.mpsClientId;this.getImageSrc=function(b){return b?"data:image/png;base64,"+this.candidateImage:"data:image/png;base64,"+this.candidateIdImage};this.isRegistrationRequestAcknowledged=function(){return this.authRequestState==f.AuthorizationRequestState.ACKNOWLEDGED};
this.isRequestSubmitted=function(){return this.authRequestState==f.AuthorizationRequestState.SUBMITTED};this.setRegistrationRequestSubmitted=function(){this.authRequestState=f.AuthorizationRequestState.SUBMITTED}}function l(b,c,a){b={candidateImage:c,candidateIdImage:a,crfs:d.getCRFsRequiredJson(),requestType:b};e.log("sendAuthorizationRequest received ",b);g.sendAuthorizationRequest(b)}function m(b,c){var a={crfs:d.getCRFsRequiredJson(),candidateImage:b,candidateIdImage:c};g.sendCandidateImageRequest(a)}
function q(b){var c=d.getCandidateDetails(),a=k.defer();e.info("Socket communication status",h);h?a.resolve():g.startCommunication(b,c).then(function(){h=!0;a.resolve()},a.reject);return a.promise}var g,h=!1;return{initAuthorization:function(b,c,a){b=k.defer();if(!cn.neyzoter.test.getInvitationKey())return b.reject({exception:"Invalid test key"}),b.promise;c={candidateInfo:new p(c),viewOptions:{isCaptureSnapImage:!0,isWebCamFeed:!0},authQueueInfo:null,resubmitPendingFields:{},isResubmit:!1,startFaceStreaming:!1};
g=a;d.isResubmitRequested()?(a=d.getAuthorizationResponse(),e.log("Resubmit request, hence fetching admin response:",a),c.candidateInfo.authRequestState=f.AuthorizationRequestState.PENDING,c.candidateInfo.requestResponse=a,c.viewOptions.isCaptureSnapImage=!1,c.isResubmit=!0):(a=d.getAuthenticationDetails(),d.resetAuthenticationDetails(),e.log("prev auth details are:",a),a&&"DENIED"==a.authorizationRequestStatus?(c.candidateInfo.authRequestState=f.AuthorizationRequestState.BLOCKED,c.candidateInfo.requestResponse=
{comments:a.reasonForBlocking}):(a&&a.authorizationRequestStatus==f.AuthorizationRequestState.APPROVED&&(c.isReAuthorization=!0),c.startFaceStreaming=!0));b.resolve(c);return b.promise},submitRequest:function(b,c,a,d){e.log("submitting authorization request");q(b).then(function(){b?l(c,a,d):m(a,d)})},reconnect:function(){g.reconnectAuthRequest()},resendAuthRequest:function(b,c,a){b&&(a.isRegistrationRequestAcknowledged()?(e.debug("reconnect:Registration request already ack"),c&&(e.debug("Sending reconnect packet"),
g.sendAuthorizationRequest({requestType:"RECONNECT"}),a.setRegistrationRequestSubmitted())):a.isRequestSubmitted()?c?l(a.requestType,a.candidateImage,a.candidateIdImage):m(a.candidateImage,a.candidateIdImage):e.debug("reconnect:Auth request is not prepared yet.Doing nothing"))},getProctoringModeEnum:function(b,c){return b?c?"MixedMode":"Applet":"ProctoringLite"},shutdownCommunication:function(){g.shutdownCommunication()}}}])});