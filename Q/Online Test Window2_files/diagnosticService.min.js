define2("services/diagnosticsConstants services/testWindowConstants services/appletService services/deployJavaService services/errorLogService constants/proctoringConstants services/proctoring/proctoringFactory".split(" "),function(){angular.module("mettl").register.factory("DiagnosticService",["$http","$window","$timeout","$q","$log","$rootScope","DiagnosticsConstants","TestWindowConstants","DeployJavaService","ProctoringConstants","ErrorLogService","ProctoringFactory","MessageProcessingService",
function(A,r,e,B,c,f,s,C,t,g,u,l,v){function w(){d.notify(g.Events.WAITING_FOR_WEBRTC_PERMISSION);var a=parseInt(1E6*Math.random()),x=parseInt(1E6*Math.random()),a={isSystemCheck:b.isSystemCheck,testState:0,isDiagnostics:!0,userId:"0_"+a,hasScreens:b.testDetails.proctoringSettings.screenCapture,email:b.testDetails.candidateEmailId||"diagnostics@mettl.com",checkSuspiciousSoftware:!b.isSkipSoftwareCheck,assessmentId:b.testDetails.assessmentId,isWebProctored:b.testDetails.isWebProctored,id:a,name:"diagnostics",
isTestPaused:!1,scheduleKey:b.isSystemCheck?"":b.testDetails.key,isApi:b.testDetails.isApi,type:0,clientId:b.testDetails.clientId,isRunningWebRTC:!0,groupId:x,uniqueId:a,isMpsCandidate:!1,mpsClientId:"1"},a={browserName:b.testDetails.browserName,browserVersion:b.testDetails.browserVersion,os:b.testDetails.os,chatServerUrl:conf.getChatServerUrl(),streamingServerUrl:conf.getStreamingServerUrl(),streamingServerPort:conf.getStreamingServerPort(),isWebProctored:b.testDetails.isWebProctored,isCheckWebRTC:!0,
messageCallBack:v.processMessage,noOfLinesToSync:conf.getNoOfLinesToSync(),authToken:a,checkMixedMode:!0,checkAudio:!b.testDetails.proctoringSettings.audioOptional,checkScreen:!1};l.runAppletDiagnostics(a).then(function(){c.log("diagnostics success")},d.reject,y)}function y(a){if(a&&a.type==n.multipleWebCam){for(var b={webcams:[]},p=0;p<a.data.length;p++)b.webcams.push(a.data[p]);f.$broadcast(h.SHOW_WEBRTC_FOR_MULTIPLE_WEB_CAM,b)}else a==h.WEBRTC_DIAGNOSTICS_COMPLETED?(d.notify(g.Events.WEBRTC_DIAGNOSTICS_COMPLETED),
c.info("WebRTC notification",a)):a&&a.type==g.Events.WEBRTC_MIXED_MODE?q=a.data:(d.notify(a),c.info("WebRTC missed notification",a))}function z(){angular.forEach(k,function(a){try{a()}catch(b){c.log("Error while destroying  watch event",b.message,a)}});e.cancel(m)}r.appletMethodsCallStack=[];r.receivedMssgStack=[];var n=s.exceptionIndex,b={exceptions:n,javaVersionCheck:!1,suspiciousSoftwareName:"",testDetails:{}};t.getJREs();var m,h=g.AppletMessageType,d,q=!1,k=[];k.push(f.$on(g.Events.DIAGNOSTICS_ERROR,
function(a,b){c.log("diagnostics error",b);e.cancel(m);d.reject(b)}));k.push(f.$on(h.LOAD_SUCCESS,function(a,b){e.cancel(void 0)}));k.push(f.$on(h.DIAGNOSTICS_SUCCESS,function(a,b){e.cancel(m);d.resolve();z()}));k.push(f.$on(h.SELF_OFFLINE,function(a,b){m=e(function(){var a={errorType:n.chatServer,data:void 0};d&&d.reject(a)},2E4)}));k.push(f.$on(h.SELF_ONLINE,function(a,b){e.cancel(m)}));b.runDiagnostics=function(a,c){b.testDetails=c;b.isSystemCheck=c.isSystemCheck||!1;b.isSkipSoftwareCheck=!c.checkSuspiciousSoftwares;
d=a;w()};b.recheckSystemSoftware=function(a,b){d=a;l.recheckSystemSoftware()};b.resumeDiagnosticsAfterCameraSelection=function(){l.resumeDiagnosticsAfterCameraSelection().then(function(a){c.log("success in webSocket diagnostics")},function(a){c.log("error in webSocket diagnostics",a)})};b.webRTCWebCamChange=function(a,b,e){l.startVideoStreamByIndex(a,b,function(a){e(a);c.log("error in webSocket diagnostics",a);q=!1;d.notify(g.Events.WEBRTC_DIAGNOSTICS_COMPLETED);c.info("WebRTC not supported! Using webcam in applet",
a);u.log(a,!0)})};b.isRunningWebRTC=function(){return q};b.checkAppletSettingAndResumeDiagnosticsAfterCameraSelection=function(){l.checkAppletSettingAndResumeDiagnosticsAfterCameraSelection().then(function(){c.log("success in webSocket diagnostics after camera selection ")},function(a){c.log("error in webSocket diagnostics after camera selection ",a)})};return b}])});